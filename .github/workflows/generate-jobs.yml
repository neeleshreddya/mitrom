name: Auto-generate jobs and blogs index with robust parsing
permissions:
  contents: write
on:
  push:
    branches:
      - main
      - master
    paths:
      - "jobs/**"
      - "blogs/**"
      - ".github/workflows/generate-indexes.yml"
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
        
      - name: Install BeautifulSoup
        run: python -m pip install --upgrade pip beautifulsoup4

      # Generate jobs/index.json
      - name: Generate jobs/index.json
        run: |
          python - <<'PYTHON'
          import os
          import glob
          import json
          import subprocess
          import datetime
          from bs4 import BeautifulSoup
          def git_date(path):
              try:
                  out = subprocess.check_output(['git', 'log', '-1', '--format=%cs', '--', path])
                  return out.decode('utf-8').strip()
              except Exception as e:
                  print(f"Git date error for {path}: {e}")
                  try:
                      mtime = os.path.getmtime(path)
                      return datetime.datetime.utcfromtimestamp(mtime).strftime('%Y-%m-%d')
                  except Exception as ex:
                      print(f"File mtime error for {path}: {ex}")
                      return ''
          jobs = []
          job_files = sorted(glob.glob('jobs/*.html'))
          for filepath in job_files:
              filename = os.path.basename(filepath)
              if filename.lower() in ('index.html', 'index.json'):
                  continue
              try:
                  with open(filepath, encoding='utf-8', errors='ignore') as f:
                      soup = BeautifulSoup(f, 'html.parser')
              except Exception as parse_error:
                  print(f"Skipping {filename} due to parse error: {parse_error}")
                  continue
              title = ''
              h1 = soup.find('h1')
              h2 = soup.find('h2')
              if h1 and h1.get_text(strip=True):
                  title = h1.get_text(strip=True)
              elif h2 and h2.get_text(strip=True):
                  title = h2.get_text(strip=True)
              elif soup.title and soup.title.string:
                  title = soup.title.string.strip()
              else:
                  title = os.path.splitext(filename)[0].replace('-', ' ').replace('_', ' ').title()
              first_p = soup.find('p')
              description = first_p.get_text(" ", strip=True) if first_p else ''
              date = git_date(filepath)
              image_url = ''
              meta_img = soup.find('meta', property='og:image')
              if meta_img and meta_img.get('content'):
                  image_url = meta_img['content']
              else:
                  img_tag = soup.find('img')
                  if img_tag and img_tag.get('src'):
                      image_url = img_tag.get('src')
              link = f'/jobs/{filename}'
              job = {
                  "title": title,
                  "description": description,
                  "date": date,
                  "link": link,
                  "image": image_url
              }
              jobs.append(job)
              print(f"Processed job: {title}")
          jobs.sort(key=lambda x: x.get('date') or '', reverse=True)
          with open('jobs/index.json', 'w', encoding='utf-8') as out_file:
              json.dump(jobs, out_file, ensure_ascii=False, indent=2)
          print(f"Successfully wrote {len(jobs)} jobs to jobs/index.json")
          PYTHON

      - name: Generate jobs-list.json
        run: python scripts/generate-jobs-list.py

      - name: Generate blogs-list.json
        run: python scripts/generate-blogs-list.py

      - name: Commit and push JSON files
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add -f jobs/index.json
          git add jobs/jobs-list.json blogs/blogs-list.json
          git commit -m 'auto: update jobs and blogs JSON' || echo 'No changes to commit'
          git push origin HEAD:${{ github.ref_name }}
